{"version":3,"sources":["sponge-island-Header.jpg","components/Containner/index.js","components/Footer/index.js","components/Wapper/index.js","components/Header/index.js","components/FriendCard/index.js","components/Subtitle/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Containner","props","className","children","Footer","Wrapper","Title","style","backgroundImage","Bgimg","FriendCard","onClick","name","src","image","alt","data-type","clicked","Subtitle","score","subtitle","timeLeft","App","state","topScore","subtitleClass","characters","friends","checkForClick","console","log","shuffleNeed","newList","map","friend","setState","changeCard","gameLose","gameWin","array","updatedList","shuffledList","sort","Math","random","displayCards","f","Header","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.561d291d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sponge-island-Header.29df1be7.jpg\";","import React from \"react\";\nimport \"./style.css\";\n\nfunction Containner(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Containner;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"mt-5 text-center footer \">\n      <span>Clicky Game @2019 by Esther Yating Su</span>\n    </footer>\n  );\n}\n\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\nimport Bgimg from \"../../sponge-island-Header.jpg\";\n\nfunction Title(props) {\n  return (\n    <div className=\"image-bg\" style={{  backgroundImage : `url(${Bgimg})`}}>\n        <div className=\"heads-bg d-flex align-items-center\">\n            <div className=\"mx-auto stickyDiv\">\n                    <h1 className=\"text-center\">{props.children}</h1>\n            </div>\n            \n        </div>\n    </div>\n\n  );\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction FriendCard(props) {\n\n  return (\n    <div className=\"card  border-warning\" onClick={()=>props.onClick(props.name)}>\n      <img src={props.image} className=\"card-img\" alt={props.name} data-type={props.clicked}></img>\n      <div className=\"card-img-overlay\">\n      </div>\n      </div>\n      \n  );\n}\n\nexport default FriendCard;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from \"react\";\nimport \"./style.css\";\n\nfunction Subtitle(props) {\n  return(\n    <div className=\"col-12 my-5\">\n        <ul className=\"nav nav-pills nav-fill\">\n            <li className=\"nav-item\">\n            <a className=\"nav-link\" >Score : {props.score}</a>\n            </li>\n            <li className=\"nav-item\">\n            <a className=\"nav-link\">Message : {props.subtitle}</a>\n            </li>\n            <li className=\"nav-item\">\n            <a className=\"nav-link\" >Time Left : {props.timeLeft}</a>\n            </li>\n        </ul>\n      </div>\n  )\n}\n\nexport default Subtitle;","import React from \"react\";\nimport Containner from \"./components/Containner/index\";\nimport Footer from \"./components/Footer/index\";\nimport Wrapper from \"./components/Wapper/index\";\nimport Header from \"./components/Header/index\";\nimport friends from \"./friends.json\";\nimport FriendCard from \"./components/FriendCard/index\"\nimport Subtitle from \"./components/Subtitle\";\n\nclass App extends React.Component {\n  // Setting the initial state of the App component\n  \n  state = {\n    score: 0,\n    topScore: 0,\n    timeLeft: 12,\n    subtitle: \"Click an image to begin!\",\n    subtitleClass: \"\",\n    characters:  friends\n  };\n  checkForClick = (name) =>{\n\n    console.log(`get into check for click!    :`);\n    let shuffleNeed = false;\n    let newList = this.state.characters.map(friend => {\n      if(friend.name === name){\n        if(friend.clicked === false){\n          // this.gameWin();\n              return {...friend, clicked : true }\n          }\n          else{\n            shuffleNeed = true;\n            return {...friend, clicked : false} \n          }\n        }\n      return friend;\n    })\n    console.log(\"get the Newlist\",newList);\n\n    if(shuffleNeed){\n      this.setState({characters : this.changeCard(this.gameLose())});\n      console.log(\"shuddle need :::\", this.state.characters);\n    }else{\n      this.setState({characters : this.changeCard(this.gameWin(newList))});\n      console.log(\"shuddle do not need :::\", this.state.characters);\n    }\n}\n  gameWin = (array) =>{\n    console.log(\"Winning the game!!!\")\n    if(this.state.timeLeft < 1){\n      this.setState({\n        score : 0,\n        subtitle : \"You Win !!!\",\n      });\n      const updatedList =this.state.characters.map(friend => friend.clicked ===  true ? {...friend, clicked: false} : friend);\n      console.log(\"Get 12 score!\",updatedList);\n      return updatedList;\n    }else{\n      this.setState({\n        score : this.state.score + 1,\n        timeLeft : this.state.timeLeft -1,\n        subtitle : \"One Point For You !!!\",\n      });\n      console.log(\"Get one point!\",array);\n      return array;\n    }\n  }\n  gameLose = () =>{\n    console.log(\"Lose the Game~~~~\");\n    this.setState({\n      score : 0,\n      timeLeft : 12,\n      subtitle : \"You lost! Try Again\"\n    });\n    const updatedList = this.state.characters.map(friend => friend.clicked ===  true ? {...friend, clicked: false} : friend);\n    console.log(\"Reset all the clicked value\",updatedList);\n    return updatedList;\n  }\n  changeCard = (characters)=>{\n    console.log(\"Shuffling\",characters);\n  let shuffledList = characters.sort(function() {\n    return .5 - Math.random();\n      })\n    console.log(\"Shuffled List\", shuffledList);\n    return shuffledList;\n  };\n  displayCards = ()=>{\n    return this.state.characters.map(f => (\n        <FriendCard name = {f.name} image = {f.image}  onClick = {this.checkForClick} clicked = {f.clicked}></FriendCard>)\n    );\n      \n  };\n  render() {\n    return (\n      <Containner>\n        <Wrapper>\n          <Header>Remember All Your Friends!!!</Header>\n          <Subtitle score={this.state.score} subtitle={this.state.subtitle} timeLeft={this.state.timeLeft} />\n          {this.displayCards(this.state.characters)}\n          \n        </Wrapper>\n        <Footer/>\n      </Containner>\n    );\n  \n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}