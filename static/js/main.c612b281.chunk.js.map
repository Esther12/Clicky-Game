{"version":3,"sources":["components/Wapper/index.js","components/Header/index.js","components/FriendCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Title","FriendCard","onClick","src","image","class","alt","name","App","state","score","topScore","timeLeft","subtitle","subtitleClass","characters","friends","changeCard","setState","sort","Math","random","console","log","displayCards","map","f","occupation","location","Header","this","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6+BAOeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCG1BC,MAJf,SAAeH,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAME,W,aCavBE,MAZf,SAAoBJ,GAElB,OACE,yBAAKC,UAAU,uBAAuBI,QAASL,EAAMK,SACnD,yBAAKC,IAAKN,EAAMO,MAAOC,MAAM,WAAWC,IAAKT,EAAMU,OACnD,yBAAKT,UAAU,uBC6CNU,E,2MAhDbC,MAAQ,CACNC,MAAO,EACPC,SAAU,EACVC,SAAU,GACVC,SAAU,2BACVC,cAAe,GACfC,WAAYC,G,EAEdC,WAAa,WAEZ,EAAKC,SAAS,CAACH,WAAYC,EAAQG,KAAK,WACvC,MAAO,GAAKC,KAAKC,aAGjBC,QAAQC,IAAI,EAAKd,MAAMM,YACvB,EAAKS,gB,EAEPA,aAAe,WACb,OAAO,EAAKf,MAAMM,WAAWU,IAAI,SAAAC,GAAC,OAC9B,kBAAC,EAAD,CAAYnB,KAAQmB,EAAEnB,KAAMH,MAASsB,EAAEtB,MAAOuB,WAAcD,EAAEC,WAAYC,SAAYF,EAAEE,SAAU1B,QAAW,EAAKe,gB,wEAKtH,OACE,kBAAC,EAAD,KACE,kBAACY,EAAD,qCAeDC,KAAKN,oB,GA1CMO,aCMEC,QACW,cAA7BC,OAAOL,SAASM,UAEe,UAA7BD,OAAOL,SAASM,UAEhBD,OAAOL,SAASM,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c612b281.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction FriendCard(props) {\n\n  return (\n    <div className=\"card  border-warning\" onClick={props.onClick}>\n      <img src={props.image} class=\"card-img\" alt={props.name}></img>\n      <div className=\"card-img-overlay\">\n      </div>\n      </div>\n      \n  );\n}\n\nexport default FriendCard;\n","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wapper/index\";\nimport Header from \"./components/Header/index\";\nimport friends from \"./gameSrc.json\";\nimport FriendCard from \"./components/FriendCard/index\"\n\nclass App extends Component {\n  state = {\n    score: 0,\n    topScore: 0,\n    timeLeft: 12,\n    subtitle: \"Click an image to begin!\",\n    subtitleClass: \"\",\n    characters: friends\n  };\n  changeCard = ()=>{\n   // this.setState({score : this.state.score +1}) ;\n   this.setState({characters: friends.sort(function() {\n    return .5 - Math.random();\n      })\n    })\n    console.log(this.state.characters);\n    this.displayCards();\n  };\n  displayCards = ()=>{\n    return this.state.characters.map(f => (\n        <FriendCard name = {f.name} image = {f.image} occupation = {f.occupation} location = {f.location} onClick = {this.changeCard}></FriendCard>)\n    );\n      \n  };\n  render(){\n    return (\n      <Wrapper>\n        <Header>Remember All Your Friends!!!</Header>\n        {/* <SpongeBobCard />\n        <MrKrabsCard />\n        <SquidwardCard /> */}\n        {/* HtmlFor(let i =0, i < friends.length, i++)\n        {\n          <FriendCard name ={friends[i].name} image = {friends[i].image} occupation = {fridens[i].occupation} location = {friends[i].location}/>\n        } */}\n        {/* {friends.map(f => (<FriendCard name = {f.name} image = {f.image} occupation = {f.occupation} location = {f.location}></FriendCard>)) } */}\n       \n        \n  {/*     \n      <FriendCard onClick={changeCard} name ={friends[1].name} image = {friends[1].image} occupation = {friends[1].occupation} location = {friends[1].location}/>\n      <FriendCard onClick={changeCard} name ={friends[0].name} image = {friends[0].image} occupation = {friends[0].occupation} location = {friends[0].location}/>\n      <FriendCard onClick={changeCard} name ={friends[2].name} image = {friends[2].image} occupation = {friends[2].occupation} location = {friends[2].location}/> */}\n      {this.displayCards()}\n        \n      </Wrapper>\n    );\n  \n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}